### NOT SUPPOSED TO BE PUSHED YET

### What does Lean actually do?

What actually happens, when I type this into emacs or VS Code?

```lean
definition n : â„• := 59 + 65537
```

First Lean's tokenizer (note to self: is it called that?) turns the string of unicode characters that your editor gave it, into a bunch of Lean's Tokens. The Tokens in this case would be

```
definition : a lean thing (what is it?)
n : a variavble perhaps?
: : a colon
\N : notation
:= : a thingy
59 : possibly one or two tokens? I think it's one.
```

The Parser (or possibly the next part of the parser) then has to decide what to do. By looking at left and right binding powers of things and unfolding all notation it turns it into some sort of -- what? A tree? Yes -- an abstract syntax tree. At the minute we're simply thinking of the code as "some specific computer program test.lean written in some computer programming language called Lean". 

What is the output of the parser? An abstract syntax tree, or a parse tree = concrete syntax tree?

https://en.wikipedia.org/wiki/Abstract_syntax_tree#/media/File:Abstract_syntax_tree_for_Euclidean_algorithm.svg

What is the abstract syntax tree for that definition above?
here comes a definition, so I'll give you name, type and expression.
Name : some string of unicode characters called "n" [END]
Type : some notation. It means nat which is a token.
Value : some token




Then what? The elaborator? What does Lean's elaborator take as input and what does it give out as output? An abstract syntax tree or a concrete syntax tree?





(e.g. `:` is some sort of inbuilt thing, not notation; := is the same, neither are notation. 5 isn't notation either. + is notation surely!